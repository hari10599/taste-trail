// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  INFLUENCER
  OWNER
  ADMIN
  MODERATOR
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  bio           String?
  avatar        String?
  role          UserRole  @default(USER)
  verified      Boolean   @default(false)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile       Profile?
  reviews       Review[]
  likes         Like[]
  comments      Comment[]
  restaurants   Restaurant[] // For owners
  notifications Notification[] @relation("NotificationRecipient")
  sentNotifications Notification[] @relation("NotificationSender")
  sessions      Session[]
  influencerApplication InfluencerApplication?
  reports       Report[] @relation("ReportedBy")
  moderationActions ModerationAction[] @relation("ModeratedBy")
  strikes       UserStrike[] @relation("UserStrikes")
  notificationPrefs NotificationPreference? @relation("NotificationPrefs")
  mediaUploads  MediaUpload[] @relation("MediaUploads")
  
  @@index([email])
}

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location         String?
  phone            String?
  bio              String?
  dietaryPrefs     String[]
  cuisinePreferences String[] @default([])
  socialLinks      Json?    // For influencers
  followerCount    Int?     // For influencers
  verificationDocs String[] // For verification requests
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  @@index([userId])
  @@index([refreshToken])
}

model Restaurant {
  id           String   @id @default(cuid())
  name         String
  description  String
  address      String
  latitude     Float
  longitude    Float
  phone        String?
  website      String?
  email        String?
  priceRange   Int      @default(2) // 1-4
  categories   String[]
  amenities    String[]
  images       String[]
  coverImage   String?
  openingHours Json     // Store as JSON object
  verified     Boolean  @default(false)
  ownerId      String?
  owner        User?    @relation(fields: [ownerId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  reviews      Review[]
  
  @@index([name])
  @@index([categories])
  @@index([ownerId])
}

model Review {
  id            String    @id @default(cuid())
  rating        Int       // 1-5
  title         String?
  content       String
  images        String[]
  dishes        String[]  @default([])
  visitDate     DateTime
  pricePerPerson Float?
  helpful       Int       @default(0)
  notHelpful    Int       @default(0)
  isPromoted    Boolean   @default(false)
  isHidden      Boolean   @default(false)
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  likes         Like[]
  comments      Comment[]
  notifications Notification[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
  @@index([restaurantId])
  @@index([createdAt])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, reviewId])
  @@index([reviewId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([reviewId])
  @@index([parentId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // like, comment, follow, review_response, etc.
  title     String
  message   String
  read      Boolean  @default(false)
  data      Json?    // Additional data
  
  userId    String
  user      User     @relation("NotificationRecipient", fields: [userId], references: [id], onDelete: Cascade)
  
  fromId    String?
  from      User?    @relation("NotificationSender", fields: [fromId], references: [id], onDelete: SetNull)
  
  reviewId  String?
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([userId, read])
  @@index([createdAt])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model InfluencerApplication {
  id                  String            @id @default(cuid())
  userId              String            @unique
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramHandle     String?
  youtubeChannel      String?
  tiktokHandle        String?
  followerCount       Int
  contentType         String[]
  reasonForApplication String
  status              ApplicationStatus @default(PENDING)
  submittedAt         DateTime          @default(now())
  reviewedAt          DateTime?
  reviewedBy          String?
  reviewerNotes       String?
  
  @@index([status])
  @@index([submittedAt])
}

model RestaurantAnalytics {
  id             String   @id @default(cuid())
  restaurantId   String
  date           DateTime @db.Date
  views          Int      @default(0)
  reviewCount    Int      @default(0)
  avgRating      Float    @default(0)
  totalLikes     Int      @default(0)
  totalComments  Int      @default(0)
  
  @@unique([restaurantId, date])
  @@index([restaurantId])
  @@index([date])
}

model OwnerResponse {
  id           String   @id @default(cuid())
  reviewId     String   @unique
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([reviewId])
}

enum ReportType {
  REVIEW
  RESTAURANT
  USER
  COMMENT
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  REJECTED
}

model Report {
  id          String       @id @default(cuid())
  type        ReportType
  targetId    String
  reporterId  String
  reporter    User         @relation("ReportedBy", fields: [reporterId], references: [id])
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Moderation actions on this report
  moderationActions ModerationAction[]
  
  @@index([type, targetId])
  @@index([reporterId])
  @@index([status])
  @@index([createdAt])
}

enum ModerationActionType {
  WARNING
  TEMPORARY_BAN
  PERMANENT_BAN
  CONTENT_REMOVAL
  CONTENT_RESTORE
  ACCOUNT_SUSPENSION
  ACCOUNT_REINSTATEMENT
  REPORT_DISMISS
}

model ModerationAction {
  id          String               @id @default(cuid())
  type        ModerationActionType
  targetId    String
  targetType  String // 'user', 'review', 'restaurant', 'comment'
  moderatorId String
  moderator   User                 @relation("ModeratedBy", fields: [moderatorId], references: [id])
  reason      String?
  notes       String?
  reportId    String?
  report      Report?              @relation(fields: [reportId], references: [id])
  expiresAt   DateTime?
  createdAt   DateTime             @default(now())
  
  // Related strikes
  strikes     UserStrike[]
  
  @@index([targetId, targetType])
  @@index([moderatorId])
  @@index([createdAt])
}

model UserStrike {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserStrikes", fields: [userId], references: [id])
  reason    String
  actionId  String
  action    ModerationAction @relation(fields: [actionId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime?
  
  @@index([userId])
  @@index([createdAt])
}

model ContentFlag {
  id        String   @id @default(cuid())
  contentId String
  contentType String // 'review', 'comment', 'restaurant'
  reason    String
  automated Boolean  @default(false)
  severity  Int      @default(1) // 1-5 severity scale
  createdAt DateTime @default(now())
  
  @@unique([contentId, contentType])
  @@index([contentType])
  @@index([severity])
}

model NotificationPreference {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation("NotificationPrefs", fields: [userId], references: [id])
  emailEnabled Boolean @default(true)
  pushEnabled  Boolean @default(true)
  reviewLikes  Boolean @default(true)
  reviewComments Boolean @default(true)
  newFollowers Boolean @default(true)
  ownerResponses Boolean @default(true)
  systemUpdates Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MediaUpload {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation("MediaUploads", fields: [userId], references: [id])
  fileId       String   @unique // ImageKit file ID
  fileName     String
  originalName String
  filePath     String
  url          String
  thumbnailUrl String?
  mimeType     String
  size         Int
  width        Int?
  height       Int?
  folder       String   @default("general")
  tags         String[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@index([fileId])
  @@index([folder])
  @@index([createdAt])
}